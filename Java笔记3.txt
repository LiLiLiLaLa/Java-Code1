一.类与对象
1.Java的面向对象编程
（1）面向过程--->编程范式--->C语言--->面向行为（吃狗屎）
面向对象--->能进行现实生活的抽象（狗吃屎）
面向接口编程
面向切口编程
函数式编程范式--->Scala
java的lamdba表达式：（）->（）
（2）面向对象三大特征
a.封装：将客观事物封装为抽象的类，并且类可以把自己的数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。内部操作对不可信的外部而言不可见（保护性）。
b继承：可以使用现有类的所有功能，并且在无需重复编写原有类的情况下对原有类进行功能上的扩展（可重用）。
c.多态：一个类实例的相同方法在不同情形下有不同的表现形式，多态机制使得具有不同内部结构的对象可以共享外部相同的接口。
OOA：面向对象分析
OOD：面向对象设计
OOP：面向对象编程
2.类与对象的定义与使用
（1）类是共性概念，对象是一个具体的、可以使用的事物
首先先有类（产生对象关系的蓝图），而后才可以产生对象。对象所具有的所以行为和属性，一定是在类中进行完整定义的。
（2）类中组成
a.方法（操作行为）
b.属性（操作的数据，每个对象应该具有的特征）
（3）Java中类的定义语法
class 类名称{
       属性类型 属性名称1
       属性类型 属性名称2
       .........
      方法一 （）{}
      方法二 （）{}
      .........
}
类中的属性与方法不再由主方法直接调用，而需要对象来调用
（4）对象声明语法
类名称 对象名称 = new 类名称（）；
person per1 = new person();
（5）类与对象内存分析
new关键字，在堆上开辟了新的空间
栈内存：存放局部变量（方法中的变量），包含各种基本数据类型以及对象引用->对象的名称（即一块堆内存的地址）
堆内存：保存真正的对象，包含对象的属性
（6）对象（引用数据类型）必须在实例化后调用，否则会产生运行时异常（NULLpointerException）
（7）垃圾空间：没有任何栈内存指向的堆内存空间，会在垃圾回收时释放掉
3.private实现封装处理：让内部操作对外部不可见（在类的外部不能直接使用对象来操作属性），可以使用private对属性进行封装，称为类的私有属性。
java规范：所有私有属性要想要访问与设置内容，提供对应的getter与setter方法
getter方法：取得属性内容
setter方法：进行属性内容设置与更改
4.构造方法
（1）(a)Person (b)per1 = (c)new (d)Person();
特点：a.方法名称必须与类名称相同
b.构造方法没有返回值类型声明
c.每个类至少存在一个构造方法（没有明确定义，系统默认生成一个无参构造）
d.若类中定义了构造方法，则默认的无参构造就不会再生成
（2）构造方法的重载：参数个数不同
进行类定义遵循以下顺序：先定义属性，再定义构造方法，构造方法根据参数个数大小排列，再定义普通方法
（3）匿名方法：没有栈内存指向的方法

二.this关键字
1.this调用本类属性：this.属性名明确表示调用类中的同名属性
规范：在类的普通方法中访问本类属性，一定要加this关键字
2.this调用本类方法：
a.调用普通方法：this.方法名称（参数）
b.调用构造方法：this（参数）
this调用本类其他方法必须放在首行调用（编译器语法错误）
this调用构造方法不允许成环（编译器语法错误）
3.this表示当前对象

三.static关键字
1.static属性（类属性）：通过类名调用
2.static属性特点
a.访问static属性应该使用类名称.属性名（类属性）-描述共享概念
b.所有的非static属性（实力属性）必须在对象实例化以后才可使用，而static属性（类属性）不受实例化约束